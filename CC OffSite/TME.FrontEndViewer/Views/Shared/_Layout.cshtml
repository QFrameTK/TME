<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    @RenderBody()
    
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/clickable")
    @RenderSection("scripts", false)
    
    <script>
        Array.prototype.like = function (array2, comparer) {
            var array1 = this

            comparer = comparer || function (x1, x2) { return x1 === x2 }

            return array2 && (array1.length === array2.length) && array1.every(function (x1, i) {
                return comparer(x1, array2[i])
            })
        }

        $('.object').each(function () {
            var object = $(this)
            if (object.data('linked-item'))
                return

            var isOld = !!object.parents('#oldarea').length

            var parents = object.parents('.object')

            var linkedObject = findMatchingObject(object, isOld ? '#newarea' : '#oldarea')

            var parentObjects = object.parents('.object')
            if (!parentObjects.length)
                parentObjects = object

            var parentLinkedObjects = linkedObject.parents('.object')
            if (!parentLinkedObjects.length)
                parentLinkedObjects = linkedObject

            if (!linkedObject.length) {
                if (parentObjects.is(object))
                    object.addClass('missing')
                else {
                    parentObjects.each(function (i, parent) {
                        $(parent).addClass('missing-sub-item')
                    })
                    object.addClass('missing')
                }
                return
            }

            object.data('linked-item', linkedObject)
            linkedObject.data('linked-item', object)

            object.find('.property').filter(isClosestTo(object))
                                       .each(function () {
                var property = $(this)
                var id = getDataId(property)
                var linkedProperty = linkedObject.find('.property[data-id="' + id + '"]')
                                           .filter(isClosestTo(linkedObject))

                var allowMismatch = linkedProperty.hasClass('allow-mismatch')
                var isMismatch = linkedProperty.html() !== property.html()
                var isUnique = linkedProperty.length === 1

                if (isUnique && isMismatch && allowMismatch) {
                    linkedProperty.addClass('allowed-mismatch')
                    property.addClass('allowed-mismatch')
                }

                if (!isUnique || (isMismatch && !allowMismatch)) {
                    parentLinkedObjects.each(function (i, parent) {
                        $(parent).addClass('mismatch')
                    })
                    linkedProperty.addClass('mismatch')
                    
                    if (!parentLinkedObjects.is(linkedObject))
                        linkedObject.addClass('mismatch')

                    parentObjects.each(function (i, parent) {
                        $(parent).addClass('mismatch')
                    })
                    property.addClass('mismatch')
                    if (!parentObjects.is(object))
                        object.addClass('mismatch')
                }
            })
        })

        function findMatchingObject(object, linkedSelector) {
            var parentsIds = object.parents('.object')
                                         .toArray()
                                         .map(getDataId)

            var id = getDataId(object)
            return $(linkedSelector + ' .object[data-id="' + id + '"]').filter(function () {
                var candidateParentsIds = $(this).parents('.object')
                                                 .toArray()
                                                 .map(getDataId)

                return parentsIds.like(candidateParentsIds)
            })
        }

        function isClosestTo(parent) {
            return function () {
                return $(this).closest('.object').is(parent)
            }
        }

        function getDataId(element) {
            return $(element).attr('data-id').replace(/('|")/g, "\\$1")
        }


        //$("#oldarea .object").each(function () {
        //    var id = $(this).data('id');
        //    var newObject = $("#newarea .object[data-id=" + id + "]");


        //    if (newObject.length == 0) {
        //        $(this).parent().addClass('missing');
        //        return;
        //    }

        //    $('.property', this).each(function () {
        //        var propertyid = $(this).data('id');
        //        var newProperty = $(".property[data-id=" + propertyid + "]", newObject);

        //        if (newProperty.length != 1 || $(newProperty[0]).html() != $(this).html()) {

        //            $(newProperty).parent().parent().addClass('mismatch');
        //            $(newProperty).addClass('mismatch');
        //            $(this).parent().parent().addClass('mismatch');
        //            $(this).addClass('mismatch');
        //        }


        //    });

        //});




    </script>    
</body>
</html>
