<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>@ViewBag.Title</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
</head>
<body>
    @RenderBody()
    
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/clickable")
    @RenderSection("scripts", false)
    
    <script>

        Array.prototype.like = function (array2, comparer) {
            var array1 = this

            comparer = comparer || function (x1, x2) { return x1 === x2 }

            return array2 && (array1.length === array2.length) && array1.every(function (x1, i) {
                return comparer(x1, array2[i])
            })
        }

        $('#oldarea .object').each(function () {
            var oldObject = $(this)
            var oldParents = oldObject.parents('.object')

            var newObject = findMatchingNewObject(oldObject)

            var parentOldObjects = oldObject.parents('.object')
            if (!parentOldObjects.length)
                parentOldObjects = oldObject

            var parentNewObjects = newObject.parents('.object')
            if (!parentNewObjects.length)
                parentNewObjects = newObject

            oldObject.data('linked-item', newObject)
            newObject.data('linked-item', oldObject)

            if (!newObject.length) {
                if (parentOldObjects.is(oldObject))
                    oldObject.addClass('missing')
                else {
                    parentOldObjects.each(function (i, parent) {
                        $(parent).addClass('mismatch')
                    })
                    oldObject.addClass('missing')
                }
                return
            }

            oldObject.find('.property').filter(isClosestTo(oldObject))
                                       .each(function () {
                var oldProperty = $(this)
                var newProperty = newObject.find('.property[data-id="' + oldProperty.data('id') + '"]')
                                           .filter(isClosestTo(newObject))

                var allowMismatch = newProperty.hasClass('allow-mismatch')
                var isMismatch = newProperty.html() !== oldProperty.html()
                var isUnique = newProperty.length === 1

                if (isUnique && isMismatch && allowMismatch) {
                    newProperty.addClass('allowed-mismatch')
                    oldProperty.addClass('allowed-mismatch')
                }

                if (!isUnique || (isMismatch && !allowMismatch)) {
                    parentNewObjects.each(function (i, parent) {
                        $(parent).addClass('mismatch')
                    })
                    newProperty.addClass('mismatch')
                    
                    if (!parentNewObjects.is(newObject))
                        newObject.addClass('mismatch')

                    parentOldObjects.each(function (i, parent) {
                        $(parent).addClass('mismatch')
                    })
                    oldProperty.addClass('mismatch')
                    if (!parentOldObjects.is(oldObject))
                        oldObject.addClass('mismatch')
                }
            })
        })

        function findMatchingNewObject(oldObject) {
            var oldParentsIds = oldObject.parents('.object')
                                         .toArray()
                                         .map(getDataId)

            return $('#newarea .object[data-id="' + oldObject.data('id') + '"]').filter(function () {
                var candidateParentsIds = $(this).parents('.object')
                                                 .toArray()
                                                 .map(getDataId)

                return oldParentsIds.like(candidateParentsIds)
            })
        }

        function isClosestTo(parent) {
            return function () {
                return $(this).closest('.object').is(parent)
            }
        }

        function getDataId(element) {
            return $(element).data('id')
        }


        //$("#oldarea .object").each(function () {
        //    var id = $(this).data('id');
        //    var newObject = $("#newarea .object[data-id=" + id + "]");


        //    if (newObject.length == 0) {
        //        $(this).parent().addClass('missing');
        //        return;
        //    }

        //    $('.property', this).each(function () {
        //        var propertyid = $(this).data('id');
        //        var newProperty = $(".property[data-id=" + propertyid + "]", newObject);

        //        if (newProperty.length != 1 || $(newProperty[0]).html() != $(this).html()) {

        //            $(newProperty).parent().parent().addClass('mismatch');
        //            $(newProperty).addClass('mismatch');
        //            $(this).parent().parent().addClass('mismatch');
        //            $(this).addClass('mismatch');
        //        }


        //    });

        //});




    </script>    
</body>
</html>
